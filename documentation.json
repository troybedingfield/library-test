{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ToastService",
            "id": "injectable-ToastService-ba262d44713fb17704c548e2295901f73525974b117881e6411fac5cb6ef9a0e5dfe5e0ccefc7518e61d9982b34bd78ff0bb5806a9ee6c1fb08efe9fb23b4d28",
            "file": "src/app/shared/services/toast.service.ts",
            "properties": [
                {
                    "name": "showToast$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "toastMessage$",
                    "defaultValue": "new BehaviorSubject<string>('Default Toast Message')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "toastState$",
                    "defaultValue": "new BehaviorSubject<string>(TOAST_STATE.success)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dismissToast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showToast",
                    "args": [
                        {
                            "name": "toastState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toastMsg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toastState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toastMsg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport const TOAST_STATE = {\r\n  success: 'success-toast',\r\n  warning: 'warning-toast',\r\n  danger: 'danger-toast'\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastService {\r\n\r\n  // The boolean that drives the toast's 'open' vs. 'close' behavior.  \r\n  public showToast$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n\r\n  // The message string that'll bind and display on the toast. \r\n  public toastMessage$: BehaviorSubject<string> = new BehaviorSubject<string>('Default Toast Message');\r\n\r\n  // The state that will add a style class to the component. \r\n  public toastState$: BehaviorSubject<string> = new BehaviorSubject<string>(TOAST_STATE.success);\r\n\r\n  constructor() { }\r\n\r\n  showToast(toastState: string, toastMsg: string): void {\r\n\r\n    // This will update the toastState to the toastState passed into the function\r\n    this.toastState$.next(toastState);\r\n\r\n    // This updates the toastMessage to the toastMsg passed into the function\r\n    this.toastMessage$.next(toastMsg);\r\n\r\n    // This will update the showToast trigger to 'true'\r\n    this.showToast$.next(true);\r\n  }\r\n\r\n  // This updates the showToast behavioursubject to 'false'  \r\n  dismissToast(): void {\r\n    this.showToast$.next(false);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e159a6b8054a1798835e3025135ad2e2cd5688255ca7e23fa3fcdc8ce27806d5227bd51236b28169ab065bdd913212c4afb5779954ba6a0cdab0380aed7f2917",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'library-test'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "showToast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponentLocal",
                    "type": "component"
                },
                {
                    "name": "BannerComponent",
                    "type": "component"
                },
                {
                    "name": "BannerComponentLocal",
                    "type": "component"
                },
                {
                    "name": "ToastComponentLocal",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { ButtonComponent, BannerComponent, ExpandableComponent } from 'ngx-troy-ui';\r\nimport { ButtonComponentLocal } from './shared/components/button/button.component';\r\nimport { BannerComponentLocal } from './shared/components/banner/banner.component';\r\nimport { ToastComponentLocal } from './shared/components/toast/toast.component';\r\nimport { TOAST_STATE, ToastService } from './shared/services/toast.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [\r\n    RouterOutlet,\r\n    ButtonComponent,\r\n    ButtonComponentLocal,\r\n    BannerComponent,\r\n    BannerComponentLocal,\r\n    ToastComponentLocal],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n  title = 'library-test';\r\n\r\n  constructor(private toast: ToastService) { }\r\n\r\n  showToast() {\r\n    this.toast.showToast(\r\n      TOAST_STATE.success,\r\n      'Your message was sent!');\r\n  }\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toast",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "toast",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <p>button</p>\r\n  <div class=\"example\">\r\n    <p>Library</p>\r\n    <troy-button [upperCase]=\"true\" [color]=\"'success'\" [customBGColor]=\"'#000000'\">test</troy-button>\r\n  </div>\r\n  <div class=\"example\">\r\n    <p>Local</p>\r\n    <app-button [upperCase]=\"true\" [color]=\"'success'\" [customBGColor]=\"'#000000'\">Button</app-button>\r\n  </div>\r\n\r\n  <p>banner</p>\r\n  <div class=\"example\">\r\n    <p>Library</p>\r\n    <troy-banner [color]=\"'info'\" [primaryText]=\"'This is a banner'\" [detailMessages]=\"['test']\" [showClose]=\"true\">\r\n    </troy-banner>\r\n  </div>\r\n  <div class=\"example\">\r\n    <p>Local</p>\r\n    <app-banner [color]=\"'info'\" [primaryText]=\"'This is a banner'\" [detailedMessages]=\"['test']\" [showClose]=\"true\">\r\n    </app-banner>\r\n  </div>\r\n  <div class=\"example\">\r\n    <p>Local</p>\r\n    <app-banner [color]=\"'info'\" [primaryText]=\"'This is a banner'\">\r\n    </app-banner>\r\n  </div>\r\n  <div class=\"example\">\r\n    <p>Local</p>\r\n    <app-button (click)=\"showToast()\">Show Toast</app-button>\r\n    <app-toast>\r\n    </app-toast>\r\n  </div>\r\n</div>"
        },
        {
            "name": "BannerComponentLocal",
            "id": "component-BannerComponentLocal-b389ccbde76e1bc3ef0421f0d1b0daf27c8703aa70fb05b4263f883ef74cf3ae017a8a09e4ccd31cbbbe6d7455123f2c02f158dfbb4b24bd1363ba6f05a046a4",
            "file": "src/app/shared/components/banner/banner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-banner",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./banner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "\"info\" | \"success\" | \"warning\" | \"error\"",
                    "decorators": []
                },
                {
                    "name": "detailedMessages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string[] | undefined",
                    "decorators": []
                },
                {
                    "name": "primaryText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showClose",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isExpanded",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "showBanner",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onExpandCollapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ExpandableComponentLocal",
                    "type": "component"
                },
                {
                    "name": "NgTemplateOutlet"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "NgFor"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { ExpandableComponentLocal } from '../expandable/expandable.component';\r\nimport { NgClass, NgFor, NgIf, NgTemplateOutlet } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-banner',\r\n  standalone: true,\r\n  imports: [ExpandableComponentLocal, NgTemplateOutlet, NgIf, NgClass, NgFor],\r\n  templateUrl: './banner.component.html',\r\n  styleUrl: './banner.component.scss'\r\n})\r\nexport class BannerComponentLocal {\r\n  @Input() primaryText = '';\r\n  @Input() detailedMessages: string[] | undefined = [];\r\n  @Input() color: 'info' | 'success' | 'warning' | 'error' = 'info';\r\n  @Input() showClose: boolean = true;\r\n\r\n  isExpanded: boolean = true;\r\n  showBanner: boolean = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onExpandCollapse() {\r\n    this.isExpanded = !this.isExpanded;\r\n  }\r\n\r\n  onCloseClick(): void {\r\n    this.showBanner = false;\r\n  }\r\n}\r\n",
            "styleUrl": "./banner.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "extends": [],
            "templateData": "<div *ngIf=\"showBanner\" class=\"banner banner-{{ color }}\">\r\n    <div class=\"content-section\">\r\n        <ng-container\r\n            [ngTemplateOutlet]=\"detailedMessages!.length > 0 ? detailBanner : singleLineBanner\"></ng-container>\r\n    </div>\r\n</div>\r\n\r\n\r\n<ng-template #singleLineBanner>\r\n\r\n    <div class=\"single-header\">\r\n        <div class=\"primary-text\">{{ primaryText }} </div>\r\n        <div *ngIf=\"showClose\" class=\"close clickable\" [class.close-with-detail]=\"detailedMessages!.length > 0\"\r\n            (click)=\"onCloseClick()\"></div>\r\n\r\n    </div>\r\n</ng-template>\r\n\r\n\r\n<ng-template #detailBanner>\r\n    <div class=\"detail-header\">\r\n        <span class=\"primary-text clickable\" (click)=\"onExpandCollapse()\">\r\n            <span class=\"banner-expander banner-expander-{{ color }}\"\r\n                [ngClass]=\"isExpanded ? 'expanded' : 'collapsed'\"></span>\r\n            <b>{{ primaryText }}</b>\r\n        </span>\r\n        <div *ngIf=\"showClose\" class=\"close clickable\" [class.close-with-detail]=\"detailedMessages!.length > 0\"\r\n            (click)=\"onCloseClick()\"></div>\r\n    </div>\r\n    <app-expandable [expanded]=\"isExpanded\">\r\n        <ul [ngClass]=\"detailedMessages?.length == 1 ? 'single-detail-message' : 'multiple-detail-messages'\">\r\n            <li *ngFor=\"let msg of detailedMessages\">\r\n                {{ msg }}\r\n            </li>\r\n        </ul>\r\n    </app-expandable>\r\n</ng-template>"
        },
        {
            "name": "ButtonComponentLocal",
            "id": "component-ButtonComponentLocal-11b434b22e79f8ede55d8683cc0d82877b7a27f3553828a602ebbbef5f4c3e9247bcada3ec888a7bd1442928646a605c5f9876795970432d4f28a0c63717ed4b",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"default\" | \"success\" | \"warning\" | \"error\" | \"disabled\" | undefined",
                    "decorators": []
                },
                {
                    "name": "customBGColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "customBorderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "customColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean | undefined",
                    "decorators": []
                },
                {
                    "name": "fill",
                    "defaultValue": "'solid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"solid\" | \"outline\" | \"clear\" | undefined",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number | undefined",
                    "decorators": []
                },
                {
                    "name": "minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number | undefined",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"small\" | \"medium\" | \"large\" | undefined",
                    "decorators": []
                },
                {
                    "name": "upperCase",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgStyle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { NgStyle } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [NgStyle],\r\n  templateUrl: './button.component.html',\r\n  //   template: `\r\n  //   <ng-content></ng-content>\r\n  // `,\r\n  styleUrl: './button.component.scss',\r\n})\r\nexport class ButtonComponentLocal {\r\n  @Input() label: string = '';\r\n  @Input() color: 'default' | 'success' | 'warning' | 'error' | 'disabled' | undefined = 'default';\r\n  @Input() disabled: boolean | undefined = false;\r\n  @Input() fill: 'solid' | 'outline' | 'clear' | undefined = 'solid';\r\n  @Input() size: 'small' | 'medium' | 'large' | undefined = 'medium';\r\n  @Input() upperCase: boolean | undefined = false;\r\n  @Input() maxWidth: number | undefined;\r\n  @Input() minWidth: number | undefined;\r\n  @Input() customBGColor: string | undefined;\r\n  @Input() customColor: string | undefined;\r\n  @Input() customBorderColor: string | undefined;\r\n\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  constructor() { }\r\n\r\n\r\n}\r\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "extends": [],
            "templateData": "<button class=\"{{ color }} {{ fill }} {{ size }} {{upperCase === true ? 'text-uppercase' : ''}}\" [disabled]=\"disabled\"\r\n    [style.maxWidth]=\"maxWidth + 'px'\" [style.minWidth]=\"minWidth + 'px'\" [style.backgroundColor]=\"customBGColor\"\r\n    [style.color]=\"customColor\" [style.borderColor]=\"customBorderColor\">\r\n    <ng-content></ng-content>\r\n</button>"
        },
        {
            "name": "ExpandableComponentLocal",
            "id": "component-ExpandableComponentLocal-2b0d0abe2166edb3fb66a89caf38d531dde65fa4357f1661e15b929a724af7fa3c17b4db1e32b0fc996459e0938aee318168b02cba11afcd89889ed8a8d7a245",
            "file": "src/app/shared/components/expandable/expandable.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-expandable",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./expandable.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean | undefined",
                    "decorators": []
                },
                {
                    "name": "vertical",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "state",
                    "defaultValue": "'collapsed'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-expandable',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './expandable.component.html',\r\n  styleUrl: './expandable.component.scss',\r\n  animations: [\r\n    trigger('resizeX', [\r\n      state('initial', style({ height: '0px' })),\r\n      state('collapsed', style({ height: '0px' })),\r\n      state('expanded', style({ height: '*' })),\r\n      transition('collapsed => expanded', animate('200ms')),\r\n      transition('expanded => collapsed', animate('200ms')),\r\n      transition('* => initial', animate('0ms'))\r\n    ]),\r\n    trigger('resizeY', [\r\n      state('initial', style({ width: '0px' })),\r\n      state('collapsed', style({ width: '0px' })),\r\n      state('expanded', style({ width: '*' })),\r\n      transition('collapsed => expanded', animate('200ms')),\r\n      transition('expanded => collapsed', animate('200ms')),\r\n      transition('* => initial', animate('0ms'))\r\n    ])\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ExpandableComponentLocal implements OnInit {\r\n\r\n  @Input() expanded: boolean | undefined;\r\n  @Input() vertical = false;\r\n\r\n  state = 'collapsed';\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.state = this.expanded ? 'expanded' : 'collapsed';\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.state = this.expanded ? 'expanded' : 'collapsed';\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./expandable.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 35
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"expandable-content\" [@resizeX]=\"!vertical ? state : null\" [@resizeY]=\"vertical ? state : null\">\r\n    <ng-content></ng-content>\r\n</div>"
        },
        {
            "name": "ToastComponentLocal",
            "id": "component-ToastComponentLocal-609387dd9035722c909187a16ebc95694563e3fdc1a814cee726530d4e1b27e47fccce6a665d7f56e6b4bfa46943f21187676595242c21ee33d1bd55a4a442be",
            "file": "src/app/shared/components/toast/toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toast",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toast.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showToast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "toast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "toastClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "toastMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { NgIf, AsyncPipe } from '@angular/common';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { ToastService } from '../../services/toast.service';\r\n\r\n@Component({\r\n  selector: 'app-toast',\r\n  standalone: true,\r\n  imports: [NgIf, AsyncPipe],\r\n  templateUrl: './toast.component.html',\r\n  styleUrl: './toast.component.scss',\r\n  animations: [\r\n    trigger('toastTrigger', [ // This refers to the @trigger we created in the template      \r\n      state('open', style({ transform: 'translatex(0%)' })), // This is how the 'open' state is styled      \r\n      state('close', style({ transform: 'translatex(200%)' })), // This is how the 'close' state is styled      \r\n      transition('open <=> close', [ // This is how they're expected to transition from one to the other         \r\n        animate('300ms ease-in-out')\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class ToastComponentLocal {\r\n  toastClass: string[] = [];\r\n  toastMessage: string = '';\r\n  showToast: boolean | undefined;\r\n\r\n  constructor(public toast: ToastService) { }\r\n\r\n  ngOnInit(): void {\r\n    //Called after the constructor, initializing input properties, and the first call to ngOnChanges.\r\n    //Add 'implements OnInit' to the class.\r\n  }\r\n\r\n  dismiss(): void {\r\n    this.toast.dismissToast();\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./toast.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toast",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "toast",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div [class]=\"toast.toastState$ | async\" [@toastTrigger]=\"(toast.showToast$ | async) ? 'open' : 'close'\">\r\n    <div class=\"toast-interior\">\r\n        {{ toast.toastMessage$ | async }}\r\n    </div>\r\n\r\n    <a class=\"toast-close\" (click)=\"dismiss()\">\r\n\r\n    </a>\r\n</div>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes),\r\n    NgxTroyUiComponent,\r\n    importProvidersFrom([BrowserModule, BrowserAnimationsModule])\r\n  ]\r\n}"
            },
            {
                "name": "TOAST_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/toast.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  success: 'success-toast',\r\n  warning: 'warning-toast',\r\n  danger: 'danger-toast'\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes),\r\n    NgxTroyUiComponent,\r\n    importProvidersFrom([BrowserModule, BrowserAnimationsModule])\r\n  ]\r\n}"
                }
            ],
            "src/app/shared/services/toast.service.ts": [
                {
                    "name": "TOAST_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/toast.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  success: 'success-toast',\r\n  warning: 'warning-toast',\r\n  danger: 'danger-toast'\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/banner/banner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BannerComponentLocal",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponentLocal",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/expandable/expandable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpandableComponentLocal",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastComponentLocal",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/toast.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOAST_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}